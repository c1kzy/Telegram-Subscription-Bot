// Code generated by MockGen. DO NOT EDIT.
// Source: subscriptionbot/db (interfaces: Storage)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	db "subscriptionbot/db"

	gomock "github.com/golang/mock/gomock"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// MongoStorage is a mock of Storage interface.
type MongoStorage struct {
	ctrl     *gomock.Controller
	recorder *MongoStorageMockRecorder
}

// MongoStorageMockRecorder is the mock recorder for MongoStorage.
type MongoStorageMockRecorder struct {
	mock *MongoStorage
}

// NewMongoStorage creates a new mock instance.
func NewMongoStorage(ctrl *gomock.Controller) *MongoStorage {
	mock := &MongoStorage{ctrl: ctrl}
	mock.recorder = &MongoStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MongoStorage) EXPECT() *MongoStorageMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MongoStorage) Delete(arg0 primitive.ObjectID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MongoStorageMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MongoStorage)(nil).Delete), arg0)
}

// GetSubscribedUsers mocks base method.
func (m *MongoStorage) GetSubscribedUsers(arg0 context.Context) ([]db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscribedUsers", arg0)
	ret0, _ := ret[0].([]db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscribedUsers indicates an expected call of GetSubscribedUsers.
func (mr *MongoStorageMockRecorder) GetSubscribedUsers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscribedUsers", reflect.TypeOf((*MongoStorage)(nil).GetSubscribedUsers), arg0)
}

// GetUser mocks base method.
func (m *MongoStorage) GetUser(arg0 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MongoStorageMockRecorder) GetUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MongoStorage)(nil).GetUser), arg0)
}

// Insert mocks base method.
func (m *MongoStorage) Insert(arg0 *db.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MongoStorageMockRecorder) Insert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MongoStorage)(nil).Insert), arg0)
}

// Update mocks base method.
func (m *MongoStorage) Update(arg0 primitive.D, arg1 primitive.ObjectID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MongoStorageMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MongoStorage)(nil).Update), arg0, arg1)
}

// UserSubscriptionStatus mocks base method.
func (m *MongoStorage) UserSubscriptionStatus(arg0 primitive.ObjectID) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserSubscriptionStatus", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserSubscriptionStatus indicates an expected call of UserSubscriptionStatus.
func (mr *MongoStorageMockRecorder) UserSubscriptionStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserSubscriptionStatus", reflect.TypeOf((*MongoStorage)(nil).UserSubscriptionStatus), arg0)
}
