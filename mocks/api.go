// Code generated by MockGen. DO NOT EDIT.
// Source: git.foxminded.ua/foxstudent106270/telegramapi.git (interfaces: TelegramService)

// Package mocks is a generated GoMock package.
package mocks

import (
	url "net/url"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// TelegramService is a mock of TelegramService interface.
type TelegramService struct {
	ctrl     *gomock.Controller
	recorder *TelegramServiceMockRecorder
}

// TelegramServiceMockRecorder is the mock recorder for TelegramService.
type TelegramServiceMockRecorder struct {
	mock *TelegramService
}

// NewTelegramService creates a new mock instance.
func NewTelegramService(ctrl *gomock.Controller) *TelegramService {
	mock := &TelegramService{ctrl: ctrl}
	mock.recorder = &TelegramServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *TelegramService) EXPECT() *TelegramServiceMockRecorder {
	return m.recorder
}

// SendResponse mocks base method.
func (m *TelegramService) SendResponse(arg0 int, arg1 url.Values) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendResponse", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendResponse indicates an expected call of SendResponse.
func (mr *TelegramServiceMockRecorder) SendResponse(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendResponse", reflect.TypeOf((*TelegramService)(nil).SendResponse), arg0, arg1)
}
